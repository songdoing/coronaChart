{"version":3,"sources":["components/header.js","components/contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","recoveredData","setRecoveredData","nowData","setNowData","useEffect","fetchEvents","a","axios","get","res","console","log","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","lastMonth","length","options","title","display","text","position","fontSize","legend","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b38c986a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>COVID-19 : CANADA</h1>\r\n      {/* <select>\r\n        <option>CANADA</option>\r\n        <option>WORLD</option>\r\n      </select> */}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Bar, Doughnut, Line, HorizontalBar } from \"react-chartjs-2\";\r\nimport axios from \"axios\";\r\n\r\nconst Contents = () => {\r\n  const [confirmedData, setConfirmedData] = useState({});\r\n  const [quarantinedData, setQuarantinedData] = useState({});\r\n  const [recoveredData, setRecoveredData] = useState({});\r\n  const [nowData, setNowData] = useState({});\r\n\r\n  useEffect(() => {\r\n    //데이터를 다 받은 다음에 순차적으로 실행하도록 async와 await\r\n    const fetchEvents = async () => {\r\n      const res = await axios.get(\r\n        \"https://api.covid19api.com/total/dayone/country/ca\"\r\n      );\r\n      console.log(res);\r\n      makeData(res.data);\r\n    };\r\n    const makeData = (items) => {\r\n      const arr = items.reduce((acc, cur) => {\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n        //console.log(year, month, date);\r\n        //console.log(cur);\r\n        const confirmed = cur.Confirmed;\r\n        const active = cur.Active;\r\n        const death = cur.Deaths;\r\n        const recovered = cur.Recovered;\r\n\r\n        const findItem = acc.find((a) => a.year === year && a.month === month);\r\n\r\n        if (!findItem) {\r\n          //key:value가 같으면 생략 가능 {year:year, month:month...}\r\n          acc.push({ year, month, date, confirmed, active, death, recovered });\r\n        }\r\n        if (findItem && findItem.date < date) {\r\n          // 오늘날짜보다 작으면 최신날짜로 업데이트해주기\r\n          findItem.active = active;\r\n          findItem.death = death;\r\n          findItem.recovered = recovered;\r\n          findItem.confirmed = confirmed;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.date = date;\r\n        }\r\n        //console.log(cur, year, month, date);\r\n        return acc;\r\n      }, []);\r\n      console.log(arr);\r\n\r\n      const labels = arr.map((a) => `${a.year} - ${a.month + 1}`);\r\n      setConfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"Cumulative cases\",\r\n            backgroundColor: \"salmon\",\r\n            fill: true,\r\n            data: arr.map((a) => a.confirmed),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setQuarantinedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"Quarantined cases\",\r\n            borderColor: \"blue\",\r\n            fill: false,\r\n            data: arr.map((a) => a.active),\r\n          },\r\n        ],\r\n      });\r\n\r\n      setRecoveredData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"Recovered cases\",\r\n            backgroundColor: \"green\",\r\n            fill: false,\r\n            data: arr.map((a) => a.recovered),\r\n          },\r\n        ],\r\n      });\r\n\r\n      //가장 최신월 가져오기\r\n      const lastMonth = arr[arr.length - 1];\r\n      setNowData({\r\n        labels: [\"Confirmed\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"Confirmed, Recovered, Deaths cases\",\r\n            backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n            borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n            fill: false,\r\n            data: [lastMonth.confirmed, lastMonth.recovered, lastMonth.death],\r\n          },\r\n        ],\r\n      });\r\n    };\r\n\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  return (\r\n    <section>\r\n      <h2>CANADA</h2>\r\n      <div className=\"contents\">\r\n        <div>\r\n          <Bar\r\n            data={confirmedData}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: \"Cumulative cases\",\r\n                position: \"top\",\r\n                fontSize: 18,\r\n              },\r\n              legend: { display: true, position: \"bottom\" },\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <Line\r\n            data={quarantinedData}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: \"Quarantined cases\",\r\n                position: \"top\",\r\n                fontSize: 18,\r\n              },\r\n              legend: { display: true, position: \"bottom\" },\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <HorizontalBar\r\n            data={recoveredData}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: \"Recovered cases\",\r\n                position: \"top\",\r\n                fontSize: 18,\r\n              },\r\n              legend: { display: true, position: \"bottom\" },\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <Doughnut\r\n            data={nowData}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text: `Confirmed, Recovered, Deaths cases (${new Date().getFullYear()} - ${\r\n                  new Date().getMonth() + 1\r\n                })`,\r\n                position: \"top\",\r\n                fontSize: 18,\r\n              },\r\n              legend: { display: true, position: \"bottom\" },\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Contents;\r\n","import \"./App.css\";\nimport Header from \"./components/header\";\nimport Contents from \"./components/contents\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}